generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model academicyears {
  id        Int        @id @default(autoincrement())
  year      DateTime?  @db.Date
  createdAt DateTime   @db.Timestamp(6)
  updatedAt DateTime   @db.Timestamp(6)
  articles  articles[]
  topic     topic[]
}

model articles {
  id               Int            @id @default(autoincrement())
  submittedDate    DateTime?      @db.Timestamp(6)
  reviewStatus     String?        @db.VarChar(255)
  userId           Int?
  facultyId        Int?
  academicYearId   Int?
  createdAt        DateTime       @db.Timestamp(6)
  updatedAt        DateTime       @db.Timestamp(6)
  documentFile     String?        @db.VarChar(255)
  comment          String?        @db.VarChar(255)
  shortDescription String?        @db.VarChar(255)
  imageFile        String?        @db.VarChar(255)
  topicId          Int?
  academicyears    academicyears? @relation(fields: [academicYearId], references: [id])
  faculties        faculties?     @relation(fields: [facultyId], references: [id])
  topic            topic?         @relation(fields: [topicId], references: [id])
  users            users?         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model closeddates {
  id          Int       @id @default(autoincrement())
  closingDate DateTime? @db.Date
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @db.Timestamp(6)
  topicId     Int?
  topic       topic?    @relation(fields: [topicId], references: [id])
}

model faculties {
  id        Int        @id @default(autoincrement())
  name      String?    @db.VarChar(255)
  createdAt DateTime   @db.Timestamp(6)
  updatedAt DateTime   @db.Timestamp(6)
  articles  articles[]
  topic     topic[]
  users     users[]
}

model grouproles {
  id        Int      @id @default(autoincrement())
  groupId   Int?
  roleId    Int?
  createdAt DateTime @db.Timestamp(6)
  updatedAt DateTime @db.Timestamp(6)
  groups    groups?  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  roles     roles?   @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model groups {
  id         Int          @id @default(autoincrement())
  name       String?      @db.VarChar(255)
  createdAt  DateTime     @db.Timestamp(6)
  updatedAt  DateTime     @db.Timestamp(6)
  grouproles grouproles[]
  users      users[]
}

model roles {
  id          Int          @id @default(autoincrement())
  url         String?      @db.VarChar(255)
  description String?      @db.VarChar(255)
  createdAt   DateTime     @db.Timestamp(6)
  updatedAt   DateTime     @db.Timestamp(6)
  grouproles  grouproles[]
}

model topic {
  id             Int            @id @default(autoincrement())
  name           String?        @db.VarChar(255)
  description    String?        @db.VarChar(255)
  facultyId      Int?
  academicYearId Int?
  createdAt      DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt      DateTime       @db.Timestamp(6)
  articles       articles[]
  closeddates    closeddates[]
  academicyears  academicyears? @relation(fields: [academicYearId], references: [id])
  faculties      faculties?     @relation(fields: [facultyId], references: [id])
}

model users {
  id        Int        @id @default(autoincrement())
  username  String?    @db.VarChar(255)
  email     String?    @db.VarChar(255)
  password  String?    @db.VarChar(255)
  groupId   Int?
  createdAt DateTime   @db.Timestamp(6)
  updatedAt DateTime   @db.Timestamp(6)
  facultyId Int?
  avatar    String?    @db.VarChar(255)
  articles  articles[]
  faculties faculties? @relation(fields: [facultyId], references: [id])
  groups    groups?    @relation(fields: [groupId], references: [id], onDelete: Cascade)
}
