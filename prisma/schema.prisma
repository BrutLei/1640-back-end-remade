generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model academicyears {
  id        Int        @id @default(autoincrement())
  year      DateTime?  @db.Date
  createdAt DateTime   @db.DateTime(0)
  updatedAt DateTime   @db.DateTime(0)
  articles  articles[]

  topic topic[]
}

model articles {
  id               Int                    @id @default(autoincrement())
  shortDescription String?                @db.VarChar(255)
  comment          String?                @db.VarChar(255)
  imageFile        String?                @db.VarChar(255)
  documentFile     String?                @db.VarChar(255)
  submittedDate    DateTime?              @db.DateTime(0)
  reviewStatus     articles_reviewStatus?
  userId           Int?
  facultyId        Int?
  academicYearId   Int?
  createdAt        DateTime               @db.DateTime(0)
  updatedAt        DateTime               @db.DateTime(0)
  users            users?                 @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "articles_ibfk_1")
  faculties        faculties?             @relation(fields: [facultyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "articles_ibfk_2")
  academicyears    academicyears?         @relation(fields: [academicYearId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "articles_ibfk_3")
  topic            topic?                 @relation(fields: [topicId], references: [id])
  topicId          Int?

  @@index([academicYearId], map: "academicYearId")
  @@index([facultyId], map: "facultyId")
  @@index([userId], map: "userId")
}

model closeddates {
  id          Int       @id @default(autoincrement())
  closingDate DateTime? @db.Date
  createdAt   DateTime  @default(now()) @db.DateTime(0)
  updatedAt   DateTime  @updatedAt @db.DateTime(0)
  topic       topic?    @relation(fields: [topicId], references: [id])
  topicId     Int?
}

model faculties {
  id        Int        @id @default(autoincrement())
  name      String?    @db.VarChar(255)
  createdAt DateTime   @db.DateTime(0)
  updatedAt DateTime   @db.DateTime(0)
  articles  articles[]

  users users[]
  topic topic[]
}

model grouproles {
  id        Int      @id @default(autoincrement())
  groupId   Int?
  roleId    Int?
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)
  groups    groups?  @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "grouproles_ibfk_1")
  roles     roles?   @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "grouproles_ibfk_2")

  @@index([groupId], map: "groupId")
  @@index([roleId], map: "roleId")
}

model groups {
  id         Int          @id @default(autoincrement())
  name       String?      @db.VarChar(255)
  createdAt  DateTime     @db.DateTime(0)
  updatedAt  DateTime     @db.DateTime(0)
  grouproles grouproles[]
  users      users[]
}

model roles {
  id          Int          @id @default(autoincrement())
  url         String?      @db.VarChar(255)
  description String?      @db.VarChar(255)
  createdAt   DateTime     @db.DateTime(0)
  updatedAt   DateTime     @db.DateTime(0)
  grouproles  grouproles[]
}

model users {
  id        Int        @id @default(autoincrement())
  avatar    String?    @db.VarChar(255)
  username  String?    @db.VarChar(255)
  email     String?    @db.VarChar(255)
  password  String?    @db.VarChar(255)
  groupId   Int?
  createdAt DateTime   @db.DateTime(0)
  updatedAt DateTime   @db.DateTime(0)
  facultyId Int?
  articles  articles[]
  faculty   faculties? @relation(fields: [facultyId], references: [id])
  groups    groups?    @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_ibfk_1")

  @@index([groupId], map: "groupId")
  @@index([facultyId], map: "users_facultyId_fkey")
}

model topic {
  id             Int            @id @default(autoincrement())
  name           String?        @db.VarChar(255)
  description    String?        @db.VarChar(255)
  facultyId      Int?
  academicYearId Int?
  createdAt      DateTime       @default(now()) @db.DateTime(0)
  updatedAt      DateTime       @updatedAt @db.DateTime(0)
  faculty        faculties?     @relation(fields: [facultyId], references: [id])
  academicyear   academicyears? @relation(fields: [academicYearId], references: [id])
  articles       articles[]
  closeddates    closeddates[]

  @@index([facultyId], map: "facultyId")
  @@index([academicYearId], map: "academicYearId")
}

enum articles_reviewStatus {
  Reviewing
  Approve
  Reject
}
